{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/app.js","webpack:///./lib/canvas.js","webpack:///./lib/polygon.js","webpack:///./lib/settings.js","webpack:///./lib/symmetry.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAA8B;;AAE9B;AACA,uBAAuB,+CAAM;AAC7B,CAAC,E;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAoE;AACkB;AACxC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D;AAC/D;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC,6DAAW;AAC5C,mCAAmC,6DAAW;AAC9C;AACA,gF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,6DAAW;AAC1C,iCAAiC,6DAAW;AAC5C;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,gBAAgB,gEAAc,CAAC,gEAAc;AAC7C,aAAa;AACb,mDAAmD,yDAAQ,EAAE,gEAAc;AAC3E;;;AAGA;AACA;;AAEA;AACA;AACA;AACA,YAAY,qEAAmB,CAAC,gEAAc;AAC9C,SAAS;AACT,YAAY,0DAAS,EAAE,gEAAc;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe,qEAAM,E;;;;;;;;;;;;;;;;;AC3Fd;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO;AACP;AACA,kB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kBAAkB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,C;;;;;;;;;;;;;;;;;AC5CO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;AAEO;AACP;AACA;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAO;AACP;AACA;AACA,eAAe,cAAc;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEO;AACP;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/app.js\");\n","import Canvas from './canvas';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const canvas = new Canvas();\n});","import {colorPicker, widthPicker, divisionPicker} from \"./settings\";\nimport {circleSymmetry, circlePointSymmetry, polygonPointSymmetry } from './symmetry';\nimport {polyPoint, polySymm} from './polygon';\nclass Canvas {\n    constructor(){\n        this.canvas = document.querySelector(\"canvas\");\n        this.context = this.canvas.getContext(\"2d\");\n        this.clear = document.getElementById(\"clear\");\n        this.polygonModeButton = document.getElementById(\"polygon-mode\")\n        this.mirrorModeButton = document.getElementById(\"mirror\");\n        this.width = this.canvas.width;\n        this.height = this.canvas.height;\n        [this.startX, this.startY] = [0, 0]; //initializing coordinates\n        [this.endX, this.endY] = [0, 0];\n        this.draw = false;\n        this.polygonMode = false;\n        this.mirrorMode = false;\n        this.clear.onclick = this.handleClear.bind(this);\n        this.polygonModeButton.onclick = this.handlePolygonMode.bind(this);\n        this.mirrorModeButton.onclick = this.handleMirrorMode.bind(this);\n        this.canvas.onpointermove = this.handleMove.bind(this);  //handles pointer clicking and dragging\n        this.canvas.onpointerdown = this.handleDown.bind(this);\n        this.canvas.onpointerup = this.endDraw.bind(this);      // stops drawing when no click/drag\n        this.canvas.onpointerout = this.endDraw.bind(this);\n        this.startDraw = this.startDraw.bind(this);\n        this.getCoordinates = this.getCoordinates.bind(this);\n        this.drawCoordinates = this.drawCoordinates.bind(this);\n        }\n\n    startDraw(startX = this.startX, startY = this.startY, endX= this.endX, endY = this.endY){\n        this.context.beginPath();\n        this.context.lineWidth = widthPicker();\n        this.context.strokeStyle = colorPicker();\n        this.context.lineCap = \"round\";\n        this.context.moveTo(startX - this.width / 2 , startY - this.height / 2);  \n        this.context.lineTo(endX - this.width / 2, endY - this.height / 2);\n        this.context.stroke();\n        this.context.restore();\n    }\n\n    endDraw(){\n        this.draw = false;\n    }\n\n    getCoordinates(e){\n        [this.startX, this.startY] = [this.endX , this.endY];\n        this.endX = e.clientX - this.canvas.offsetLeft;\n        this.endY = e.clientY - this.canvas.offsetTop;\n    }\n    drawCoordinates(x,y){\n        this.context.beginPath();\n        this.context.arc(x, y, widthPicker()/2, 0, Math.PI*2, true)\n        this.context.fillStyle = colorPicker();\n        this.context.fill();\n        this.context.restore();\n    }\n\n\n    handleMove(e){\n        if(this.draw){\n            this.getCoordinates(e);\n            if(!this.polygonMode){\n                circleSymmetry(divisionPicker(), this.mirrorMode, this.context, this.startDraw, this.width, this.height)\n            }else{\n                [this.prev_dist, this.prev_theta] =polySymm( divisionPicker(), this.context, this.width, this.height,this.endX, this.endY, this.prev_dist, this.prev_theta, this.startDraw);\n            }\n            \n\n        }\n    }\n\n    handleDown(e){\n        this.getCoordinates(e);\n        if(!this.polygonMode){\n            circlePointSymmetry(divisionPicker(), this.mirrorMode, this.context, this.drawCoordinates, this.width, this.height, this.endX, this.endY)\n        }else{\n            polyPoint( divisionPicker(), this.context, this.width, this.height, this.endX, this.endY, this.drawCoordinates);\n        }\n        this.draw = true;\n    }\n\n    handleClear(){\n        this.context.clearRect(0,0,this.width, this.height)\n    }\n\n    handlePolygonMode(){\n        this.polygonMode = !this.polygonMode;\n    }\n    handleMirrorMode(){\n        this.mirrorMode = !this.mirrorMode;\n    }\n}\n\nexport default Canvas;","\n\nexport const polyPoint = ( sections = 2, ctx, w, h, x2, y2, drawpt) => {\n    x2= x2 -w/2;\n    y2 = y2 - h/2;\n    let dist = Math.sqrt((x2 * x2) + (y2 * y2));\n    let theta1 = (Math.atan2(y2, x2) + Math.PI * 2) % (Math.PI * 2);\n    let theta2 =(Math.atan2(y2, x2) + Math.PI) % (Math.PI);\n    dist = dist*Math.cos((theta2+Math.PI/4)%(Math.PI/4*2)-Math.PI/4)/Math.cos((theta1+Math.PI/4)%(Math.PI/4*2)-Math.PI/4);\n    \n    for(let i = 0; i < 4 * sections; i++){\n        let new_theta = theta1 + i * (Math.PI *2 / (4 * sections) );\n        let dist2 =dist*Math.cos((theta1+Math.PI/4)%(Math.PI/4*2)-Math.PI/4)/Math.cos((new_theta+Math.PI/4)%(Math.PI/4*2)-Math.PI/4);\n        let xpt = dist2 * Math.cos(new_theta);\n        let ypt = dist2 * Math.sin(new_theta);\n        ctx.save()\n        drawpt(xpt + w/2 , ypt+ h/2 )\n    }\n}\n\nexport const polySymm = ( sections, ctx, w, h, x2, y2, prev_dist, prev_theta, drawline,) => {\n    x2= x2 -w/2;\n    y2 = y2 - h/2;  \n    let dist = Math.sqrt((x2 * x2) + (y2 * y2));\n    let theta1 = (Math.atan2(y2, x2) + Math.PI * 2) % (Math.PI * 2);\n    let theta2 =(Math.atan2(y2, x2) + Math.PI) % (Math.PI);\n    dist = dist*Math.cos((theta2+Math.PI/4)%(Math.PI/4*2)-Math.PI/4)/Math.cos((theta1+Math.PI/4)%(Math.PI/4*2)-Math.PI/4);\n    if(!prev_dist){\n        prev_dist = dist;\n        prev_theta = theta1;\n    }\n    for(let i = 0; i < 4 * sections; i++){\n        let new_theta = theta1 + i * (Math.PI *2 / (4 * sections));\n        let dist2 =dist*Math.cos((theta1+Math.PI/4)%(Math.PI/4*2)-Math.PI/4)/Math.cos((new_theta+Math.PI/4)%(Math.PI/4*2)-Math.PI/4);\n        let dist3 = prev_dist*Math.cos((prev_theta+Math.PI/4)%(Math.PI/4*2)-Math.PI/4)/Math.cos((new_theta + prev_theta - theta1+Math.PI/4)%(Math.PI/4*2)-Math.PI/4);\n        let xpt_1 = dist2*Math.cos(new_theta);\n        let ypt_1 = dist2*Math.sin(new_theta);\n        let xpt_2 = dist3*Math.cos(new_theta + prev_theta - theta1);\n        let ypt_2 = dist3*Math.sin(new_theta + prev_theta - theta1);\n      drawline(xpt_1 + w , ypt_1 + h, xpt_2 + w, ypt_2 + h);\n    }\n    prev_theta = theta1;\n    prev_dist = dist;\n    return [prev_dist, prev_theta]\n\n}","\nexport const colorPicker = () => {\n        const picker = document.getElementById(\"color\");\n        return picker.value;\n    }\n\nexport const widthPicker = () => {\n        const picker = document.getElementById(\"pen-width\");\n        return picker.value;\n    }\n\nexport const divisionPicker = () => {\n    const picker = document.getElementById(\"divisions\");\n    return picker.value;\n}\n","export const circleSymmetry = (sections = 2, mirror, context, startDraw, width, height) => {\n    const arc = (360 / sections) * ( Math.PI / 180);\n    let i;\n    for( i = 0; i < sections; i++){\n        context.save();\n        context.translate(width/2, height/2);\n        context.rotate(arc * i);\n        startDraw();\n    }\n    if(mirror){\n        let i;\n        for( i = 0; i < sections; i++){\n            context.save();\n            context.translate(width/2, height/2);\n            context.rotate(arc * i);\n            context.scale(-1,1);\n            startDraw();\n        }\n    }\n\n}\n\nexport const circlePointSymmetry = (sections = 2, mirror, context, startDraw, width, height, x, y) => {\n    const arc = (360 / sections) * ( Math.PI / 180);\n    const c_x = width /2;\n    const c_y = height / 2;\n    for(let i = 0; i < sections; i++){\n        context.save();\n        let x_rot = Math.cos(arc*i)*(x - c_x) - Math.sin(arc*i)*(y - c_y) +c_x;\n        let y_rot = Math.sin(arc*i)*(x - c_x) + Math.cos(arc*i)*(y - c_y) +c_y;\n        startDraw(x_rot, y_rot);\n    }\n    if(mirror){\n        let i;\n        for( i = 0; i < sections; i++){\n            context.save();\n            context.translate(width/2, height/2);\n            context.rotate(arc * i);\n            context.scale(-1,1);\n            startDraw();\n        }\n    }\n}\n\n"],"sourceRoot":""}